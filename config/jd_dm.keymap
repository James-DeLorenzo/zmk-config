/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        backspc_delete: backspc_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPC_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RGUI|MOD_RALT)>;
        };

        esc_f1: esc_f1 {
            compatible = "zmk,behavior-mod-morph";
            label = "ESC_F1";
            bindings = <&kp ESCAPE>, <&kp F1>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        bt_4: bt4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 4>;
            label = "BT4";
        };
    };

    combos {
        compatible = "zmk,combos";

        magic_combo {
            bindings = <&sl 3>;
            key-positions = <70 71>;
        };

        shift_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <75 78>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |   F1   |  F2  |  F3  |  F4  |  F5  |  F6                                                    |  F7  |   F8  |   F9  |   F10 |  F11  |  F12   |
            // |   ECS  |  1   |  2   |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |   9   |   0   |   -    |
            // |   TAB  |  Q   |  W   |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |   O   |   P   |   \    |
            // |   CAP  |  A   |  S   |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |   L   |   ;   |    '   |
            // | LSHIFT |  Z   |  X   |  C   |  V   |  B   |                                                 |  N   |   M   |   ,   |   .   |   /   | RSHIFT |
            // | LCTRL  | META | LALT |  .   |      |      |                                                 |      |       |   /   | RCTRL |  mo2  |  mo2   |
            //                                             |  1  |  2  |  3  |             |  7  |  8  |  9  |
            //                                             |  4  |  5  |  6  |             |  0  |  ,  |  .  |

            bindings = <
&esc_f1          &kp F2     &kp F3  &kp F4  &kp F5     &kp F6             &kp F7            &kp F8          &kp F9          &kp F10         &kp F11          &kp F12
&kp GRAVE        &kp N1     &kp N2  &kp N3  &kp N4     &kp N5             &kp N6            &kp N7          &kp N8          &kp N9          &kp N0           &kp MINUS
&kp TAB          &kp Q      &kp W   &kp E   &kp R      &kp T              &kp Y             &kp U           &kp I           &kp O           &kp P            &kp BSLH
&mo 2            &kp A      &kp S   &kp D   &kp F      &kp G              &kp H             &kp J           &kp K           &kp L           &kp SEMI         &kp SINGLE_QUOTE
&none            &kp Z      &kp X   &kp C   &kp V      &kp B              &kp N             &kp M           &kp COMMA       &kp PERIOD      &kp SLASH        &none
&none            &kp LGUI   &none   &none                                                                   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW     &kp RIGHT
&backspc_delete  &kp SPACE  &mo 1   &mo 1   &kp SPACE  &backspc_delete    &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp LEFT_ALT    &kp ENTER       &kp RIGHT_SHIFT  &kp RIGHT_ALT
            >;
        };

        lower {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &none       &none              &none            &none     &none      &none   &none     &none     &none      &none
&none         &none         &kp C_PREV  &kp C_PLAY_PAUSE   &kp C_NEXT       &none     &kp HOME   &none   &kp FSLH  &kp STAR  &kp MINUS  &none
&none         &none         &none       &kp UP             &none            &none     &kp END    &kp N7  &kp N8    &kp N9    &kp PLUS   &none
&none         &none         &kp LEFT    &kp DOWN           &kp RIGHT        &none     &kp PG_UP  &kp N4  &kp N5    &kp N6    &none      &none
&none         &none         &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none     &kp PG_DN  &kp N1  &kp N2    &kp N3    &none      &none
&none         &none         &none       &none                                                            &kp N0    &kp DOT   &none      &none
&trans        &trans        &trans      &trans             &trans           &trans    &none      &trans  &trans    &trans    &trans     &none
            >;
        };

        symbols {
            bindings = <
&trans      &trans       &trans    &trans          &trans                &trans           &trans     &trans                 &trans           &trans    &trans        &trans
&kp DOLLAR  &kp KP_PLUS  &kp LBKT  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp AMPERSAND    &kp EQUAL  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RBKT  &kp ASTERISK  &kp EXCLAMATION
&trans      &trans       &trans    &trans          &trans                &trans           &trans     &trans                 &trans           &trans    &trans        &trans
&trans      &trans       &trans    &trans          &trans                &trans           &trans     &trans                 &trans           &trans    &trans        &trans
&trans      &trans       &trans    &trans          &trans                &trans           &trans     &trans                 &trans           &trans    &trans        &trans
&trans      &trans       &trans    &trans                                                                                   &trans           &trans    &trans        &trans
&trans      &trans       &trans    &trans          &trans                &trans           &trans     &trans                 &trans           &trans    &trans        &trans
            >;
        };

        magic {
            bindings = <
&bt BT_CLR   &none  &none  &none  &none         &none    &none  &none  &none  &none  &none  &none
&none        &bt_0  &bt_1  &bt_2  &bt_3         &bt_4    &none  &none  &none  &none  &none  &none
&none        &none  &none  &none  &none         &none    &none  &none  &none  &none  &none  &none
&bootloader  &none  &none  &none  &none         &none    &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none  &none  &none  &none         &none    &none  &none  &none  &none  &none  &sys_reset
&none        &none  &none  &none                                       &none  &none  &none  &none
&none        &none  &none  &none  &out OUT_USB  &none    &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
