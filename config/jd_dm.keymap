/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6                                                    |  F7  |   F8  |   F9  |  F10 |   F11 |  F12 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT |      |      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |       | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1            &kp F2         &kp F3        &kp F4   &kp F5  &kp F6          &kp F7      &kp F8     &kp F9     &kp F10            &kp F11    &kp F12
&kp ESCAPE        &kp N1         &kp N2        &kp N3   &kp N4  &kp N5          &kp N6      &kp N7     &kp N8     &kp N9             &kp N0     &kp MINUS
&kp TAB           &kp Q          &kp W         &kp E    &kp R   &kp T           &kp Y       &kp U      &kp I      &kp O              &kp P      &kp BSLH
&kp CAPSLOCK      &kp A          &kp S         &kp D    &kp F   &kp G           &kp H       &kp J      &kp K      &kp L              &kp SEMI   &kp SINGLE_QUOTE
&kp LEFT_SHIFT    &kp Z          &kp X         &kp C    &kp V   &kp B           &kp N       &kp M      &kp COMMA  &kp PERIOD         &kp SLASH  &kp RSHFT
&kp LEFT_CONTROL  &kp LEFT_META  &kp LEFT_ALT  &kp DOT                                                 &kp FSLH   &kp RIGHT_CONTROL  &mo MAGIC  &mo 2
&none             &kp SPACE      &kp BSPC      &none    &none   &kp LEFT_ALT    &kp DELETE  &kp SPACE  &kp ENTER  &none              &kp RBKT   &none
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP   &none        &none      &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME     &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END      &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP    &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN    &trans     &trans      &to DEFAULT   &trans         &trans           &trans
&kp COMMA     &kp KP_N1     &kp KP_N2   &kp KP_N3                                                  &kp KP_ENTER  &trans         &trans           &kp CAPS
&kp INS       &kp F11       &trans      &trans      &trans     &trans       &trans     &trans      &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none  &none  &none  &none         &none    &none  &none  &none  &none  &none  &none
&none        &none  &none  &none  &none         &none    &none  &none  &none  &none  &none  &none
&none        &none  &none  &none  &none         &none    &none  &none  &none  &none  &none  &none
&bootloader  &none  &none  &none  &none         &none    &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none  &none  &none  &none         &none    &bt_2  &bt_3  &none  &none  &none  &sys_reset
&none        &none  &none  &none                                       &none  &none  &none  &none
&none        &none  &bt_0  &bt_1  &out OUT_USB  &none    &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
